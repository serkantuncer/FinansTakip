def altin_verisi_cek(altin_turu_kodu):
    """Altinkaynak servisine manuel SOAP isteği göndererek altın fiyatlarını çeker."""
    service_url = 'http://data.altinkaynak.com/DataService.asmx'
    altin_turu_kodu_upper = altin_turu_kodu.upper()
    app.logger.info(f"Altın Verisi Çekiliyor (Altinkaynak Manuel SOAP): {altin_turu_kodu_upper} - URL: {service_url}")

    username = 'AltinkaynakWebServis'
    password = 'AltinkaynakWebServis'

    # XML içindeki 'Aciklama' etiketine göre eşleştirme (YANITTAN ALINAN GERÇEK DEĞERLER!)
    altin_tipi_map = {
        'GA': 'Gram Altın',       # XML'deki Açıklama ile eşleşiyor
        'C': 'Çeyrek Altın',      # XML'deki Açıklama ile eşleşiyor
        'Y': 'Yarım Altın',       # XML'deki Açıklama ile eşleşiyor
        'T': 'Teklik Altın',      # XML'deki Açıklama 'Teklik Altın' (Cumhuriyet değil)
        # 'ONS': 'ONS',           # ONS için XML'de doğrudan eşleşme yok
    }
    altin_isim_aranan = altin_tipi_map.get(altin_turu_kodu_upper)
    if not altin_isim_aranan:
        app.logger.warning(f"Geçersiz veya eşleşmeyen altın türü kodu: {altin_turu_kodu_upper}")
        return None

    # SOAP 1.1 İstek XML'ini oluşturma (f-string ile)
    soap_request_xml = f"""<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Header>
    <AuthHeader xmlns="http://data.altinkaynak.com/">
      <Username>{username}</Username>
      <Password>{password}</Password>
    </AuthHeader>
  </soap:Header>
  <soap:Body>
    <GetGold xmlns="http://data.altinkaynak.com/" />
  </soap:Body>
</soap:Envelope>"""

    # HTTP Header'larını ayarlama (SOAP 1.1 için)
    headers = {
        'Content-Type': 'text/xml; charset=utf-8',
        'SOAPAction': '"http://data.altinkaynak.com/GetGold"',
        'Host': 'data.altinkaynak.com'
    }

    try:
        # POST isteğini gönderme
        response = requests.post(service_url, headers=headers, data=soap_request_xml.encode('utf-8'), timeout=20)
        response.raise_for_status() # HTTP 4xx/5xx hatalarını kontrol et

        # Yanıt XML'ini parse etme
        try:
            response_xml_root = ET.fromstring(response.content)
            namespaces = {
                'soap': 'http://schemas.xmlsoap.org/soap/envelope/',
                'ak': 'http://data.altinkaynak.com/'
            }
            get_gold_result_element = response_xml_root.find('.//soap:Body/ak:GetGoldResponse/ak:GetGoldResult', namespaces)

            if get_gold_result_element is None or get_gold_result_element.text is None:
                 get_gold_result_element = response_xml_root.find('.//{http://data.altinkaynak.com/}GetGoldResult')
                 if get_gold_result_element is None or get_gold_result_element.text is None:
                    app.logger.warning("Altinkaynak yanıt XML'inde GetGoldResult etiketi veya içeriği bulunamadı.")
                    app.logger.debug(f"Alınan yanıt içeriği (ilk 500kr): {response.text[:500]}")
                    if "Nesne başvurusu" in response.text:
                        app.logger.error("Altinkaynak servisi 'Nesne başvurusu' hatası döndürdü (yetkilendirme hatası olabilir)")
                    return None

            inner_xml_string = get_gold_result_element.text
            # TAM YANITI LOGLA (DEBUG İÇİN) - Eğer çok uzunsa sorun olabilir, gerekirse kısaltılabilir.
            app.logger.debug(f"Altinkaynak GetGoldResult İçerik Stringi (ilk 1000kr): {inner_xml_string[:1000]}...") # İlk 1000 karakter daha güvenli

            # --- Bu string'i de XML olarak parse et ---
            try:
                inner_root = ET.fromstring(inner_xml_string)
                app.logger.debug(f"Inner XML root tag adı: '{inner_root.tag}'") # Beklenen: Kurlar
                altin_bulundu = False

                # Inner XML içindeki altın kayıtlarını bul (Yapı: <Kur>...</Kur>)
                kur_elements = inner_root.findall('./Kur') # Doğrudan root altındaki Kur'ları ara
                app.logger.debug(f"Toplam {len(kur_elements)} adet <Kur> elementi bulundu.")

                for i, kur_element in enumerate(kur_elements):
                    aciklama_raw = kur_element.findtext('Aciklama')
                    satis_str = kur_element.findtext('Satis')
                    log_prefix = f"[Kur {i+1}/{len(kur_elements)}]"

                    if aciklama_raw and satis_str:
                        aciklama_clean = aciklama_raw.strip()
                        aranan_lower = altin_isim_aranan.lower()
                        bulunan_lower = aciklama_clean.lower()
                        eslesme_sonucu = (aranan_lower == bulunan_lower)

                        app.logger.debug(f"{log_prefix} Aciklama Raw: '{aciklama_raw}', Clean: '{aciklama_clean}', Satis: '{satis_str}'")
                        app.logger.debug(f"{log_prefix} KARŞILAŞTIRMA: Aranan (lower): '{aranan_lower}', Bulunan (lower): '{bulunan_lower}', SONUÇ (==): {eslesme_sonucu}")

                        if eslesme_sonucu: # Tam eşleşme kontrolü
                            try:
                                fiyat = Decimal(satis_str.replace(',', '.'))
                            except (InvalidOperation, TypeError) as e_decimal:
                                app.logger.error(f"{log_prefix} Altinkaynak Inner XML fiyatı ('{aciklama_clean}') çevirme hatası: '{satis_str}', Hata: {e_decimal}")
                                continue # Sonraki kayda geç

                            veri = {
                                'isim': aciklama_clean,
                                'guncel_fiyat': fiyat,
                                'tarih': datetime.now()
                            }
                            app.logger.info(f"Altinkaynak Altın Verisi (Manuel SOAP) Başarıyla Çekildi: {altin_turu_kodu_upper} ({aciklama_clean}) - Fiyat: {fiyat}")
                            altin_bulundu = True
                            return veri # Eşleşme bulundu, döngüden ve fonksiyondan çık
                    else:
                         app.logger.warning(f"{log_prefix} Aciklama veya Satis etiketi bulunamadı veya boş.")

                # Eğer döngü bittiyse ve altın bulunamadıysa
                if not altin_bulundu:
                    app.logger.warning(f"Döngü bitti. Altinkaynak Inner XML içinde aranan altın türü bulunamadı: '{altin_isim_aranan}' (Kod: {altin_turu_kodu_upper})")
                    return None
                
            except ET.ParseError as e:
                app.logger.error(f"Altın veri XML'i parse edilemedi: {str(e)}")
                app.logger.debug(f"Parse edilemeyen XML: {inner_xml_string[:200]}")
                return None
                
        except ET.ParseError as e:
            app.logger.error(f"SOAP yanıt XML'i parse edilemedi: {str(e)}")
            app.logger.debug(f"Parse edilemeyen yanıt: {response.text[:200]}")
            return None
            
    except requests.exceptions.Timeout:
         app.logger.error(f"Altinkaynak Manuel SOAP isteği zaman aşımına uğradı ({altin_turu_kodu_upper}).")
         return None
    except requests.exceptions.RequestException as e:
        app.logger.error(f"Altinkaynak Manuel SOAP isteği hatası ({altin_turu_kodu_upper}): {str(e)}")
        if hasattr(e, 'response') and e.response is not None:
             app.logger.error(f"Altinkaynak Hata Yanıt Kodu: {e.response.status_code}, Yanıt: {e.response.text[:200]}")
             if "Nesne başvurusu" in e.response.text:
                  app.logger.error("Altinkaynak sunucusu hala 'Nesne Başvurusu' hatası veriyor (HTTP Hata Kodu üzerinden).")
        return None
    except Exception as e:
        app.logger.error(f"Altinkaynak Altın verisi çekme (Manuel SOAP Genel) hatası ({altin_turu_kodu_upper}): {str(e)}", exc_info=True)
        return None

def doviz_verisi_cek(doviz_kodu):
    """TCMB API'sinden döviz verisi çeker"""
    doviz_kodu_upper = doviz_kodu.upper()
    
    # TCMB XML servisi
    url = "https://www.tcmb.gov.tr/kurlar/today.xml"
    
    try:
        response = requests.get(url, timeout=15)
        if response.status_code != 200:
            app.logger.warning(f"TCMB döviz verisi HTTP {response.status_code} hatası verdi.")
            return None
        
        # XML'i parse et
        root = ET.fromstring(response.content)
        
        # Döviz kodlarını kontrol et
        for currency in root.findall('.//Currency'):
            curr_code = currency.get('CurrencyCode')
            if curr_code == doviz_kodu_upper:
                # Döviz ismi
                isim = currency.find('CurrencyName').text
                
                # Alış fiyatı (ForexBuying) al
                fiyat_element = currency.find('ForexBuying')
                if fiyat_element is not None and fiyat_element.text:
                    try:
                        # Nokta ile ayrılmış ondalıklı sayıyı Decimal'e çevir
                        fiyat = Decimal(fiyat_element.text)
                        
                        return {
                            'isim': isim,
                            'guncel_fiyat': fiyat,
                            'tarih': datetime.now()
                        }
                    except (InvalidOperation, ValueError) as e:
                        app.logger.error(f"TCMB döviz fiyatı Decimal'e çevrilemedi: {str(e)} - Veri: {fiyat_element.text}")
                        return None
        
        app.logger.warning(f"TCMB verilerinde {doviz_kodu_upper} kodu bulunamadı.")
        return None
        
    except Exception as e:
        app.logger.error(f"TCMB döviz verisi çekme hatası: {str(e)}")
        return None